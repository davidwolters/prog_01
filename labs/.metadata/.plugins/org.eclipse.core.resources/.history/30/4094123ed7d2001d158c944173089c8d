package com.clock.components;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import javax.swing.*;

import com.clock.Config;
import com.clock.util.TimeHandType;
import com.clock.util.Vector;

public class ClockPanel extends JPanel implements ActionListener {
	
	private final Vector SIZE = new Vector(Config.WINDOW_W, Config.WINDOW_H);
	private final Vector CENTER = new Vector(Config.WINDOW_W / 2, Config.WINDOW_H / 2);
	
	private ArrayList<Component> components = new ArrayList<>();
	
	
	public ClockPanel() {
		setPreferredSize(SIZE.getScaledDimension());

		addTimeMarkers();
		addTimeHands();

		Timer timer = new Timer(Config.MILLIS_PER_SEC / Config.FPS, this);
		timer.start();
	}
	
	private void addTimeMarkers() {
		double radius = 200;
		double hourScalar = 2;
		double l = 20;

		for (int i = 0; i < 3600; i ++) {
			double angle = 90 - (i/10);
			Vector start = CENTER.getEndFromAngle(angle, radius);
			Vector hourStart = CENTER.getEndFromAngle(angle, radius - (l*hourScalar)/2);
			boolean hour = (i-90) % 5 == 0;
			addComponent(new DiagonalLine(hour ? hourStart : start, angle, l*((hour) ? hourScalar : 1), Color.BLUE));
		}
	}
	
	private void addTimeHands() {
		addComponent(new TimeHand(CENTER, TimeHandType.HOUR));
		addComponent(new TimeHand(CENTER, TimeHandType.MINUTE));
		addComponent(new TimeHand(CENTER, TimeHandType.SECOND));
	}
	
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		for (Component c: components) {
			c.update();
			c.paint(g);
		}
	}
	
	
	public void addComponent(Component c) {
		components.add(c);
		Collections.sort(components, (c1, c2) -> c1.compareTo(c2));
	}


	@Override
	public void actionPerformed(ActionEvent e) {
		repaint();
		
	}
	
	
}
