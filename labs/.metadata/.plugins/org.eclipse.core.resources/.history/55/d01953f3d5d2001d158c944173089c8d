package com.clock.components;

import java.awt.Color;
import java.util.Calendar;
import java.util.TimeZone;

import com.clock.Config;
import com.clock.util.TimeHandType;
import com.clock.util.Vector;

public class TimeHand extends DiagonalLine {
	
	private final int H_IN_DAY = 12;
	private final int M_IN_H = 60;
	private final int S_IN_M = 60;
	
	private TimeHandType type;

	private long framesPassed = 0;

	public TimeHand(Vector start, TimeHandType type) {
		super();
		this.start = start;
		this.type = type;
		this.angle = getAngle();
		this.color = getColor();
		this.length = getLength();
		TimeZone timeZone = TimeZone.getDefault();
		System.out.println(Calendar.getInstance(timeZone).get(Calendar.HOUR));
		System.out.println(Calendar.HOUR + ":" + Calendar.MINUTE + ":" + Calendar.SECOND);
	}
	
	@Override
	public void update() {
		super.update();
		framesPassed++;
		this.angle = getAngle();
		if (type == TimeHandType.SECOND) {
			System.out.println(getAngle());
		}

	}
	
	
	private double getAngle() {
		double progress = getTimeFraction();
		return 360*progress;
	}
	
	private double getTimeFraction() {
		double hourFrac = ((double) Calendar.HOUR) / H_IN_DAY;
		double minFrac = ((double) Calendar.MINUTE) / M_IN_H;
		double secFrac = ((double) Calendar.SECOND / S_IN_M);

		if (type == TimeHandType.HOUR)
			return hourFrac + (minFrac/H_IN_DAY) + (secFrac/(M_IN_H*H_IN_DAY));
		else if (type == TimeHandType.MINUTE)
			return minFrac + (secFrac/S_IN_M);
		return secFrac + ((double)framesPassed / (Config.FPS*S_IN_M));	
	}
	
	
	public double getLength() {
		if (type == TimeHandType.HOUR) return Config.HOUR_HAND_LENGTH;
		if (type == TimeHandType.MINUTE) return Config.MINUTE_HAND_LENGTH;
		return Config.SECOND_HAND_LENGTH;
	}
	
	public Color getColor() {
		if (type == TimeHandType.HOUR) return Color.BLUE;
		if (type == TimeHandType.MINUTE) return Color.RED;
		return Color.GREEN;
	}

}
